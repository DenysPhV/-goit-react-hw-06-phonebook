{"version":3,"sources":["components/Section/Section.module.css","components/ContactsFilter/ContactsFilter.module.css","App.module.css","components/LocalStorage/LocalStorage.js","components/redux/contacts/contacts-actions.js","components/redux/contacts/contacts-reducer.js","components/redux/store.js","components/Section/Section.js","components/Form/Form.js","components/ContactList/ContactList.js","components/ContactsFilter/ContactsFilter.js","App.js","index.js","components/Form/Form.module.css","components/ContactList/ContactList.module.css"],"names":["module","exports","contactsLocale","localStorage","getItem","parseInContacts","JSON","parse","initialContacts","contactsData","console","log","addContact","createAction","name","number","payload","_id","shortid","generate","deleteContact","changeFilter","items","createReducer","state","action","filter","id","_","combineReducers","store","configureStore","reducer","contacts","contactsReducer","devTools","process","Section","title","children","className","s","container","initialState","Form","useState","setState","useSelector","dispatch","useDispatch","nameId","numberId","handleChange","e","target","value","prev","addNoRepeatContact","some","toLowerCase","alert","onSubmit","preventDefault","form","htmlFor","label","type","onChange","pattern","required","input","button","ContactList","normalizedFilter","trim","contact","includes","getVisibleContacts","list","map","item","text","onClick","filterId","ContactsFilter","App","prevProps","prevState","nextContacts","this","props","setItem","stringify","Component","connect","ReactDom","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7610f40.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Section_container__3nDMW\",\"title\":\"Section_title__3ZQhS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"ContactsFilter_label__1tugu\",\"input\":\"ContactsFilter_input__17SLh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3lb-N\"};","import contactsData from '../../data/contacts.json';\r\n\r\nconst contactsLocale = localStorage.getItem('contacts');\r\nconst parseInContacts = JSON.parse(contactsLocale);\r\n\r\nconst initialContacts = parseInContacts ? parseInContacts : contactsData;\r\nconsole.log('this is initialContacts:', initialContacts);\r\nexport default initialContacts;\r\n","import shortid from 'shortid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addContact = createAction(({ name, number }) => ({\r\n  payload: {\r\n    _id: shortid.generate(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n\r\nconst deleteContact = createAction('contacts/delete');\r\n\r\nconst changeFilter = createAction('contacts/changeFilter');\r\n\r\nexport { addContact, deleteContact, changeFilter };\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\n\r\nimport initialContacts from '../../LocalStorage/LocalStorage';\r\nimport { addContact, deleteContact, changeFilter } from './contacts-actions';\r\n\r\nconst items = createReducer(initialContacts, {\r\n  [addContact]: (state, action) => [...state, action.payload],\r\n  [deleteContact]: (state, action) =>\r\n    state.filter(({ id }) => id !== action.payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, action) => action.payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { configureStore } from '@reduxjs/toolkit';\r\n\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n","import PropTypes from 'prop-types';\n\nimport s from './Section.module.css';\n\nconst Section = ({ title, children }) => (\n  <div className={s.container}>\n    <h2 className={s.title}>{title}</h2>\n    {children}\n  </div>\n);\n\nSection.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import React, { useState } from 'react';\n\nimport shortid from 'shortid';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// import PropTypes from 'prop-types';\nimport s from './Form.module.css';\nimport { addContact } from '../redux/contacts/contacts-actions';\n\nconst initialState = {\n  name: '',\n  number: '',\n};\n\nfunction Form() {\n  const [state, setState] = useState(initialState);\n\n  const contacts = useSelector((state) => state.contacts.items);\n  const dispatch = useDispatch();\n  const onSubmit = (name, number) => dispatch(addContact(name, number));\n\n  const nameId = shortid.generate();\n  const numberId = shortid.generate();\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setState((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const reset = () => {\n    setState((prev) => ({ ...prev, name: '', number: '' }));\n  };\n\n  const addNoRepeatContact = (state, contacts) => {\n    const { name, number } = state;\n    if (\n      contacts.some(\n        (contacts) => contacts.name.toLowerCase() === name.toLowerCase(),\n      )\n    ) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    if (contacts.some((contacts) => contacts.number === number)) {\n      alert(`${number} is already in contacts`);\n      return;\n    }\n\n    onSubmit(state);\n    reset();\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    addNoRepeatContact(state, contacts);\n  };\n\n  const { name, number } = state;\n\n  return (\n    <>\n      <form onSubmit={handleSubmit} className={s.form}>\n        <label htmlFor={nameId} className={s.label}>\n          <span>Name</span>\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            id={nameId}\n            className={s.input}\n          />\n        </label>\n        <label htmlFor={numberId} className={s.label}>\n          <span>Number</span>\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            id={numberId}\n            className={s.input}\n          />\n        </label>\n        <button type=\"submit\" className={s.button}>\n          Add contact\n        </button>\n      </form>\n    </>\n  );\n}\n\nexport default Form;\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactList.module.css';\r\n\r\nimport { deleteContact } from '../redux/contacts/contacts-actions';\r\n\r\nconst getVisibleContacts = (contacts, filter) => {\r\n  const normalizedFilter = filter.toLowerCase().trim();\r\n\r\n  return contacts.filter(\r\n    (contact) =>\r\n      contact.name.toLowerCase().includes(normalizedFilter) ||\r\n      contact.number.includes(filter),\r\n  );\r\n};\r\n\r\nconst ContactList = () => {\r\n  const contacts = useSelector(({ contacts: { items, filter } }) =>\r\n    getVisibleContacts(items, filter),\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <ul className={s.list}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id} className={s.item}>\r\n          <span className={s.text}>{name}:</span>\r\n          <span className={s.text}>{number}</span>\r\n\r\n          <button\r\n            onClick={() => {\r\n              dispatch(deleteContact(id));\r\n            }}\r\n            type=\"button\"\r\n            className={s.button}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array,\r\n  deleteContact: PropTypes.func,\r\n};\r\n\r\nexport default ContactList;\r\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport shortid from 'shortid';\n\nimport s from './ContactsFilter.module.css';\n\nimport { changeFilter } from '../redux/contacts/contacts-actions';\n\nconst filterId = shortid.generate();\n\nconst ContactsFilter = () => {\n  const filter = useSelector((state) => state.filter);\n  const dispatch = useDispatch();\n  const onChangeFilter = (e) => dispatch(changeFilter(e.target.value));\n\n  return (\n    <label htmlFor={filterId} className={s.label}>\n      <span>Filter contacts by name</span>\n      <input\n        type=\"text\"\n        value={filter}\n        onChange={onChangeFilter}\n        id={filterId}\n        className={s.input}\n      />\n    </label>\n  );\n};\n\nexport default ContactsFilter;\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport Section from './components/Section';\nimport Form from './components/Form';\nimport ContactList from './components/ContactList';\nimport ContactsFilter from './components/ContactsFilter';\n\nimport s from './App.module.css';\n\nclass App extends Component {\n  static propTypes = {\n    contacts: PropTypes.array,\n    filter: PropTypes.string,\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    const nextContacts = this.props.contacts;\n    const prevContacts = prevProps.contacts;\n\n    if (nextContacts !== prevContacts) {\n      localStorage.setItem('contacts', JSON.stringify(nextContacts));\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <Section title=\"Phonebook\">\n          <Form />\n        </Section>\n\n        <Section title=\"Contacts\">\n          <div className={s.container}>\n            <ContactsFilter />\n            <ContactList />\n          </div>\n        </Section>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  contacts: state.contacts.items,\n});\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport store from './components/redux/store';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDom.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__2Tb6c\",\"label\":\"Form_label__6roqM\",\"input\":\"Form_input__2xXXz\",\"button\":\"Form_button__50tUS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__23TZ0\",\"text\":\"ContactList_text__5fD4b\",\"button\":\"ContactList_button__1qamX\"};"],"sourceRoot":""}